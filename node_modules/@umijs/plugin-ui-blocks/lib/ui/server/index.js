"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _umi() {
  const data = require("umi");

  _umi = function _umi() {
    return data;
  };

  return data;
}

function _blockSdk() {
  const data = require("@umijs/block-sdk");

  _blockSdk = function _blockSdk() {
    return data;
  };

  return data;
}

var _Block = _interopRequireDefault(require("./core/Block"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const winPath = _umi().utils.winPath,
      glob = _umi().utils.glob,
      _ = _umi().utils.lodash,
      createDebug = _umi().utils.createDebug,
      pkgUp = _umi().utils.pkgUp;

const debug = createDebug('umi:umiui:plugin-ui-blocks:server');

var _default = api => {
  // 避免每次请求都读取文件
  const dir = winPath((0, _path().join)(__dirname, 'socketHandlers'));
  const files = glob.sync('org.umi**(ts|js)', {
    cwd: dir,
    nodir: true,
    dot: false,
    absolute: false
  }).map(f => f.replace(/\.(js|ts)$/, ''));
  api.onUISocket( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* ({
      action,
      failure,
      success,
      send
    }) {
      const blockService = new _Block.default(api);
      blockService.init(send);
      const type = action.type,
            _action$payload = action.payload,
            payload = _action$payload === void 0 ? {} : _action$payload,
            lang = action.lang;

      if (files.includes(type)) {
        try {
          let resources = [];

          const fn = require((0, _path().join)(dir, type)).default; // api.pkg 有缓存，从最底层向上找，不会错


          const pkgPath = pkgUp.sync({
            cwd: api.cwd
          });

          const _require = require(pkgPath),
                _require$devDependenc = _require.devDependencies,
                devDependencies = _require$devDependenc === void 0 ? {} : _require$devDependenc,
                _require$clientDepend = _require.clientDependencies,
                clientDependencies = _require$clientDepend === void 0 ? {} : _require$clientDepend,
                _require$dependencies = _require.dependencies,
                dependencies = _require$dependencies === void 0 ? {} : _require$dependencies,
                _require$peerDependen = _require.peerDependencies,
                peerDependencies = _require$peerDependen === void 0 ? {} : _require$peerDependen;

          const userDeps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, devDependencies), clientDependencies), dependencies), peerDependencies); // 处理本地资产


          const dumiAssets = _.flatten(Object.keys(userDeps || {}).map(library => {
            try {
              // 依赖的 package.json 路径
              const libPkgPath = require.resolve(`${library}/package.json`, {
                paths: [api.cwd, process.cwd()]
              }); // 依赖路径


              const libPath = (0, _path().dirname)(libPkgPath);

              const libPkg = require(libPkgPath);

              const assetsRelativePath = (libPkg === null || libPkg === void 0 ? void 0 : libPkg[_blockSdk().PKG_ASSETS_META]) || (libPkg === null || libPkg === void 0 ? void 0 : libPkg.assets);

              if (assetsRelativePath) {
                var _resource$assets;

                const resourcePath = (0, _path().join)(libPath, assetsRelativePath);

                const resource = require(resourcePath);

                if (resource === null || resource === void 0 ? void 0 : (_resource$assets = resource.assets) === null || _resource$assets === void 0 ? void 0 : _resource$assets.examples) {
                  const assets = _.groupBy(resource.assets.examples, example => _blockSdk().AssetType[example.type]);

                  const data = Object.keys(assets).map(blockType => _objectSpread(_objectSpread(_objectSpread({}, resource), (resource === null || resource === void 0 ? void 0 : resource.logo) ? {
                    icon: resource.logo
                  } : {}), {}, {
                    blockType,
                    assets: assets[blockType]
                  }));
                  return data.map(item => _objectSpread(_objectSpread({}, item), {}, {
                    id: resource.name,
                    resourceType: _blockSdk().ResourceType.dumi
                  }));
                }
              }
            } catch (e) {
              debug('libPkg error', e);
            }

            return null;
          }).filter(Boolean));

          delete require.cache[pkgPath];
          resources = yield api.applyPlugins({
            key: 'addBlockUIResource',
            type: api.ApplyPluginsType.add,
            initialValue: [...resources, ...dumiAssets, ..._util.DEFAULT_RESOURCES]
          });
          resources = yield api.applyPlugins({
            key: 'modifyBlockUIResources',
            type: api.ApplyPluginsType.modify,
            initialValue: resources
          });
          debug('resouces', resources);
          const handlerOpts = {
            api,
            success,
            failure,
            send,
            payload,
            lang,
            blockService,
            resources
          };
          yield fn(handlerOpts);
        } catch (e) {
          console.error(e);
          failure({
            message: e.message,
            success: false
          });
        }
      }
    });

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

exports.default = _default;