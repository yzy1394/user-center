"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _umi() {
  const data = require("umi");

  _umi = function _umi() {
    return data;
  };

  return data;
}

function _enum() {
  const data = require("@umijs/block-sdk/lib/enum");

  _enum = function _enum() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const createDebug = _umi().utils.createDebug;

const debug = createDebug('umiui:UmiUI:block:add');

function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(function* ({
    blockService,
    success,
    payload
  }) {
    const url = payload.url,
          resourceType = payload.resourceType;

    const isDumi = resourceType === _enum().ResourceType.dumi;

    const files = {};
    const dependencies = {};

    if (isDumi && payload.dependencies) {
      Object.keys(payload.dependencies).forEach(depName => {
        const depValue = payload.dependencies[depName];

        if (depValue.value) {
          if ((depValue === null || depValue === void 0 ? void 0 : depValue.type) === _enum().DEPS_TYPE.FILE) {
            files[depName] = depValue.value;
          }

          if ((depValue === null || depValue === void 0 ? void 0 : depValue.type) === _enum().DEPS_TYPE.NPM) {
            dependencies[depName] = depValue.value;
          }
        }
      });
    }

    const params = isDumi ? _objectSpread(_objectSpread({}, payload), {}, {
      files,
      dependencies
    }) : payload;
    debug('params', params);
    yield blockService.run(params);
    success({
      data: {
        message: `ðŸŽŠ ${isDumi ? Object.keys(files || {}).join(',') : url} block is adding`
      },
      success: true
    });
  });
  return _ref.apply(this, arguments);
}